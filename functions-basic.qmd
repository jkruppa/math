```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, Hmisc,
               see)
```

# Lineare und exponentielle Funktion {#sec-prob-basic}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="50%"}

In diesem Kapitel werden wir uns einmal mit den wichtigsten mathematischen Funktionen in der Anwendung beschäftigen. Wir schauen uns dabei die am meisten genutzten und am häufigsten vorkommenden Funktionen an. Daher fangen wir mit der linearen Funktion an, die uns dann in der Statistik sehr lange begleiten wird. Darüber hinaus schauen wir auch einmal auf die exponentielle Funktion, die in der Form uns später das ein oder andere Mal in der Analyse von echten Daten über den Weg läuft.


## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen. Zum einen brauchen wir das R Paket `tidyverse` um uns die Daten zu bauen, die wir dann mit dem R Paket `ggplot` visualisieren wollen. Das R Paket `ggplot` ist schon in dem R Paket `tidyverse` mit enthalten.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, magrittr)
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
```


## Lineare Funktion

Wiederholen wir einmal die klassische lineare Funktion. Die lineare Funktion wird durch zwei Parameter bestimmt. Einmal die Steigung $m$ sowie der y-Achsenabschnitt $b$. Wenn also $x$ um 1 ansteigt, dann ändert sich $y$ um den Wert von $m$. Die Gerade schneidet die $y$-Achse an dem $y$-Wert von $b_0$.

$$
f(x) = mx + b_0
$$

In der @fig-lin-simple sehen wir die lineare Funktion $f(x) = 1.5 \cdot x + 5$ einmal als Gerade dargestellt. Hier wird nochmal schnell klar, was die Parameter der Geradengleichung aussagen. Die Gerade passiert die $y$-Achse bei einem Wert von 5. Wenn wir von $x=0$ zu $x=5$ gehen, dann steigt die Gerade von $y = 5$ auf $y = 12.5$. Damit ist dann die Steigung $m = \tfrac{12.5-5}{5} = 1.5$. Eigentlich realtiv einfach und *straight forward*.

```{r}
#| echo: true
#| message: false
#| warning: false
#| label: fig-lin-simple
#| fig-align: center
#| fig-height: 4
#| fig-width: 5
#| fig-cap: "Eine einfache lineare Funktion mit der Steigung $m = 1.5$ und dem y-Achsenabschnitt $b_0 = 5$."

tibble(x = 0:10,
       y = 1.5 * x + 5) %>% 
  ggplot(aes(x, y)) +
  theme_radar() +
  ylim(0, NA) +
  geom_path() +
  geom_point() 
```

## Exponentialfunktion

Die Exponentialfunktion ist eine sehr wichtige biologische Funktion. Wir können mit der Exponentialfunktion zum Beispiel Wachstum oder aber Zerfall. Deshalb hier einmal die grundlegende Formel für die Exponentialfunktion.

$$
f(x) = b_0 + a \cdot b_1^{c\cdot x + d}
$$
Wir haben hier wieder den $y$-Achsenabschnitt $b_0$. Dann einen Multiplikator $a$ für die *eigentliche* Exponentialfunktion. Der wichtigste Parameter ist hierbei dann das $b_1$ oder die Basis. Wir haben dann noch den Exponenten, der meistens nur ein $x$ sein kann oder wiederum eine lineare Funktion. Wir konzentrieren uns hier eher auf die einfachen Exponentialfunktion. 

In der folgenden Gleichung sehen wir die Exponentialfunktion $f(x) = 2^x$ mit der Basis $2$ und dem Exponenten $x$.

$$
f(x) = 2^x
$$

Wir können uns dann einmal die Daten erschaffen.

```{r}
exp_tbl <- tibble(x = 0:10,
                  y = 2^x)
exp_tbl %>% print(n = Inf)
```

In der @fig-exp-simple sehen wir die Exponentialfunktion $f(x) = 2^x$ einmal dargestellt.

```{r}
#| echo: true
#| message: false
#| warning: false
#| label: fig-exp-simple
#| fig-align: center
#| fig-height: 4
#| fig-width: 5
#| fig-cap: "Die einfache Exponentialfunktion $f(x) = 2^x$."

exp_tbl %>% 
  ggplot(aes(x, y)) +
  theme_radar() +
  geom_path() +
  geom_point() 
```

Häufig brauchen wir aber nicht die Information von $y$ und haben das $x$ gegeben, sondern genau andersherum. Wir haben ein $y$ gegeben und wollen dafür das $x$ ausrechnen. Für die Exponentialfunktion ist die Umkehrfunktion der Logarithmus $\log()$. Nehmen wir folgende Exponentialfunktion einmal an.

$$
8 = 2^x
$$

Wir wollen jetzt die Funktion nach $x$ auflösen und nutzen dafür den Logarithmus. Wir haben eine Basis von $2$ also nutzen wir den $\log_2$ von $8$ um den Exponenten $x$ zu erhalten.

$$
\log_2(8) = 3
$$

Manchmal rechnen wir mit einer recht großen Basis oder aber der Taschenrechner hat die Funktion für einen Logarithmus einer beliebigen Basis nicht implementiert. Daher können wir folgende Rechenoperation nutzen.

$$
\log_a(b) = \cfrac{\log(b)}{\log(a)}
$$

Das ganze einmal als Beispiel für die Basis $12$ mit dem Logarithmus $\log_{12}$.

$$
\log_{12}(50) = \cfrac{\log(50)}{\log(12)} = \cfrac{3.91}{2.48} = 1.58
$$

Häufig wollen wir nicht nur den Wert für einen Exponenten rechnen, also den Wert für $f(x) = 2^5$, sondern die Summe aller $x = 1, ..., 5$. Wir wollen also folgende Rechnung durchführen.

$$
2^0 + 2^1 + 2^2 + 2^3 + 2^4 + 2^5 = 63
$$

Dafür können wir die folgende Formel nutzen. Wir setzen dann für $b_1$ die Basis ein und für $N$ den Exponenten bis zu dem wir einschließlich aufsummieren wollen.

$$
  \sum_{n=0}^N b_1^n = \cfrac{b_1^{N + 1} -1}{b_1 - 1}
$$

Das ganz können wir dann einmal ausfüllen. Die Basis $b_1$ ist dann $2$ und wir wollen bis zum fünften Exponenten aufsummieren. Daher ist dann $N = 5$.

$$
  \sum_{n=0}^5 2^n = \cfrac{2^{5 + 1} -1}{2 - 1} = 63
$$

Und einmal die Überprüfung in R Code.

```{r}
(2^(5+1)-1)/(2-1)
```

Und nochmal als Tabelle dargestellt. In der Spalte `cumsum_y` findet sich das aufsummierte $y$.

```{r}
exp_tbl %<>% 
  mutate(cumsum_y = (2^(x+1)-1)/(2-1))
exp_tbl
```

```{r}
#| echo: true
#| message: false
#| warning: false
#| label: fig-exp-simple-cumsum
#| fig-align: center
#| fig-height: 4
#| fig-width: 5
#| fig-cap: "test."

exp_tbl %>% 
  ggplot(aes(x, cumsum_y)) +
  theme_radar() +
  geom_path() +
  geom_point() 
```

$$
  \sum_{n=0}^N a \cdot r^n = a\left(\cfrac{r^{N + 1} -1}{r - 1}\right)
$$

### Halbwertszeit

$$
N(t) = N_0 \cdot \cfrac{1}{2}^{\cfrac{t}{t_{1/2}}}
$$

```{r}
#| echo: true
#| message: false
#| warning: false
#| label: fig-exp-halb
#| fig-align: center
#| fig-height: 4
#| fig-width: 5
#| fig-cap: "test."

tibble(t = 0:30,
       y = 100 * 1/2^(t/3.5)) %>% 
  ggplot(aes(t, y)) +
  theme_radar() +
  geom_path() +
  geom_point() 
```


### Sättigungsfunktion

Jedes biologisches Wachstum folgt einer Sättigungsfunktion auch wenn wir als erstes annehmen würden, es handelt sich um ein unbegrenztes exponentielles Wachstum. Hier wollen wir nicht in die Diskussion verfallen, ob es auch ein unbegrenztes ökonomisches Wachstum gibt oder nicht. Das Schneeballsystem sei hier nur warnend erwähnt.

::: column-margin
Auf der Wikipedia Seite finden sich [Beispiele für das exponentielle Wachstum](https://de.wikipedia.org/wiki/Exponentielles_Wachstum).
:::



$$
f(x) = b_0 - a \cdot b_1^{-c \cdot x + d}
$$
Im Folgenden sehen wir einmal eine Gleichung einer Sättigungsfunktion als Beispiel.

$$
f(x) = 6 - 1.5 \cdot 2^{-\frac{1}{4}\cdot x + 2}
$$

In der @fig-exp-satt 


```{r}
#| echo: true
#| message: false
#| warning: false
#| label: fig-exp-satt
#| fig-align: center
#| fig-height: 4
#| fig-width: 5
#| fig-cap: "test."

tibble(x = 0:30,
       y = 6 - 1.5 * 2^(-1/4*x + 2)) %>% 
  ggplot(aes(x, y)) +
  theme_radar() +
  geom_hline(yintercept = 6, color = cbbPalette[2]) +
  geom_path() +
  geom_point()
```





