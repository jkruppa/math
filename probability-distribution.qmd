```{r echo = FALSE}
pacman::p_load(tidyverse, readxl, knitr, kableExtra, Hmisc)
```

# Verteilungen {#sec-prob-basic}

*Version vom `r format(Sys.time(), '%B %d, %Y um %H:%M:%S')`*

![](images/caution.png){fig-align="center" width="50%"}

Wir werden uns in der [Statistikvorlesung noch vertieft mit Verteilungen](https://jkruppa.github.io/eda-distribution.html) beschäftigen. Deshalb hier nur ein kurzer Abriss und die Konzentration auf die Normalverteilung. Im Folgenden einmal die Formel für die Normalverteilung. 

$$
f(y \mid\mu,\sigma^2)=\cfrac{1}{\sqrt{2\pi\sigma^2}} e^{-\cfrac{(y-\mu)^2}{2\sigma^2}}\quad -\infty<y<\infty
$$
Die Formel sieht ganz schön wild aus, aber wir müssen mit der Formel selber nicht arbeiten. Wir wenden die Normalverteilung höchstens in der Generierung von Daten an. Sonst nutzen wir die Eigenschaften der Normalverteilung für die Analyse von Daten.

## Genutzte R Pakete für das Kapitel

Wir wollen folgende R Pakete in diesem Kapitel nutzen. Zum einen brauchen wir das R Paket `tidyverse` um uns die Daten zu bauen, die wir dann mit dem R Paket `ggplot` visualisieren wollen. Das R Paket `ggplot` ist schon in dem R Paket `tidyverse` mit enthalten.

```{r echo = TRUE}
#| message: false
pacman::p_load(tidyverse, magrittr, ggfortify)
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", 
                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
```


## Dichtefunktion

Die Funktion `dnorm()` gibt den Wert der Wahrscheinlichkeitsdichtefunktion (eng. *probability density function*, abk. *PDF*) der Normalverteilung bei einer bestimmten Zufallsvariablen $x$, einem Populationsmittelwert $\mu$ und einer Populationsstandardabweichung $\sigma$ zurück.

Wir schauen uns hier einmal die Standardnormalvertielung an. Als eine Standardnormalverteilung bezeichnet man eine Normalverteilung mit einem Mittelwert von 0 und einer Varianz bzw. Standardabweichung von 1. 

```{r}
ggdistribution(dnorm, seq(-3, 3, 0.1), mean = 0, sd = 1) +
  theme_minimal()
```

## Kumulative Dichtefunktion

Die Funktion `pnorm()` gibt den Wert der kumulativen Dichtefunktion (eng. *cumulative distribution function*, abk. *cdf*) der Normalverteilung bei einer bestimmten Zufallsvariablen $q$, einem Populationsmittel $\mu$ und einer Populationsstandardabweichung $\sigma$ zurück.

```{r}
ggdistribution(pnorm, seq(-3, 3, 0.1), mean = 0, sd = 1) +
  theme_minimal()
```

Angenommen, die Größe der Männer an einer bestimmten Schule ist normalerweise mit einem Mittelwert von $\mu = 180cm$ und einer Standardabweichung von $\sigma = 14cm$ verteilt. Wie viel Prozent der Männer an dieser Schule sind **größer** als $195cm$?

```{r}
pnorm(195, mean = 180, sd = 14, lower.tail = FALSE)
```

Angenommen, das Gewicht einer bestimmten Otterart ist normalerweise mit einem Mittelwert von $\mu = 60kg$ und einer Standardabweichung von $\sigma = 10kg$ verteilt. Wie viel Prozent dieser Otterart wiegen **mindestens** $65kg$?

```{r}
pnorm(65, mean = 60, sd = 10, lower.tail = TRUE)
```

Angenommen, die Höhe der Sonnenblumen in einer bestimmten Region Niedersachsens ist normalerweise mit einem Mittelwert von $\mu = 250cm$ und einer Standardabweichung von $\sigma = 12cm$ verteilt. Wie viel Prozent der Pflanzen in dieser Region sind $200cm$ bis $220cm$ groß?

```{r}
pnorm(260, mean = 250, sd = 12) - pnorm(240, mean = 250, sd = 12)
```


## Inverse kumulativen Dichtefunktion

Einfach ausgedrückt, kannst du `qnorm()` verwenden, um herauszufinden, wie hoch der Z-Score des p-ten Quantils der Normalverteilung ist.

```{r}
qnorm(0.95, mean = 0, sd = 1) %>% round(2)
qnorm(0.975, mean = 0, sd = 1) %>% round(2)
qnorm(0.99, mean = 0, sd = 1) %>% round(2)
```



## Visualisierung von `pnorm()` und `qnorm()`

In der @fig-distribution sehen wir den Zusammenhang zwischen der Funktion `pnorm(q = 1.96)` und der Funktion `qnorm(p = 0.975)` einmal visualisiert. Manchmal ist es daann doch recht verwirrend, was die beiden Funktion dann machen. Deshalb einmal hier der R Code für eine Standardnormalverteilung. Wenn du kein `mean` oder `sd` in den Funktionen angibst, ist der Standardwert (eng. *default*) der einer Standardnormalverteilung.

```{r}
pnorm(q = 1.96) %>% round(3)
qnorm(p = 0.975) %>% round(2)
qnorm(p = 0.025, lower.tail = FALSE) %>% round(2)
```

In der @fig-distribution sehen wir den Wert aus der Funktion `pnorm(q = 1.96)` mit $0.975$ als blaue Fläche unter der Kurve dargestellt. Den Wert für die Fläche auf der x-Achse mit $1.96$ ergibt dann die Funktion `qnorm(p = 0.975) %>% round(2)`.

![Der Zusammenhang von `pnorm()` und `qnorm` einmal an einer Standardnormalverteilung visualisiert.](images/distribution-t.png){fig-align="center" width="100%" #fig-distribution}


https://rstudio-pubs-static.s3.amazonaws.com/35515_c4ea4e9714af4d888bfc701a37c39815.html

https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggfortify/ggdistribution/


